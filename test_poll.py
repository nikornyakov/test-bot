import os
import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Bot
from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

async def send_poll_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞ –≤ –≥—Ä—É–ø–ø—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        token = os.getenv("BOT_TOKEN")
        group_id = os.getenv("GROUP_ID")
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: BOT_TOKEN={token[:10]}..., GROUP_ID={group_id}")
        
        if not token or not group_id:
            logger.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã BOT_TOKEN –∏–ª–∏ GROUP_ID")
            return False
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º group_id –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        try:
            group_id = int(group_id)
        except ValueError:
            logger.error(f"GROUP_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: {group_id}")
            return False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        now = datetime.now()
        day_of_week = now.weekday()  # 0-–ø–Ω, 1-–≤—Ç, 2-—Å—Ä, 3-—á—Ç, 4-–ø—Ç, 5-—Å–±, 6-–≤—Å
        day_name = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"][day_of_week]
        
        logger.info(f"–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: {day_name} ({day_of_week})")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        date_str = now.strftime("%d.%m.%Y")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ–ø—Ä–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        if day_of_week == 0:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            # –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤–æ –≤—Ç–æ—Ä–Ω–∏–∫
            training_date = (now + timedelta(days=1)).strftime("%d.%m.%Y")
            question = f"–ë–∞—Å–∫–µ—Ç–±–æ–ª –≤–æ –≤—Ç–æ—Ä–Ω–∏–∫ ({training_date}) üèÄ"
            options = ["‚úÖ –ë—É–¥—É", "‚ùå –ù–µ —Å–º–æ–≥—É", "ü§î –ï—â–µ –Ω–µ –∑–Ω–∞—é"]
            message = f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤–æ –≤—Ç–æ—Ä–Ω–∏–∫ ({training_date}) —Å 19:00 –¥–æ 20:30. –ö—Ç–æ –±—É–¥–µ—Ç?"
            
        elif day_of_week == 2:  # –°—Ä–µ–¥–∞
            # –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ —Å—Ä–µ–¥—É –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —á–µ—Ç–≤–µ—Ä–≥
            training_date = (now + timedelta(days=1)).strftime("%d.%m.%Y")
            question = f"–ë–∞—Å–∫–µ—Ç–±–æ–ª –≤ —á–µ—Ç–≤–µ—Ä–≥ ({training_date}) üèÄ"
            options = ["‚úÖ –ë—É–¥—É", "‚ùå –ù–µ —Å–º–æ–≥—É", "ü§î –ï—â–µ –Ω–µ –∑–Ω–∞—é"]
            message = f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ —á–µ—Ç–≤–µ—Ä–≥ ({training_date}) —Å 19:00 –¥–æ 20:30. –ö—Ç–æ –±—É–¥–µ—Ç?"
            
        else:
            logger.info(f"–°–µ–≥–æ–¥–Ω—è {day_name}, –æ–ø—Ä–æ—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = Bot(token=token)
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–ï–∞–Ω–æ–Ω–∏–º–Ω—ã–π –æ–ø—Ä–æ—Å (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø—É: {question}")
        await bot.send_poll(
            chat_id=group_id,
            question=question,
            options=options,
            is_anonymous=False,
            allows_multiple_answers=False
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É")
        await bot.send_message(
            chat_id=group_id,
            text=message
        )
        
        logger.info("–û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        return True
        
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞: {e}")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("=" * 50)
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞")
    logger.info("=" * 50)
    
    success = await send_poll_async()
    
    if success:
        logger.info("–û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.info("–û–ø—Ä–æ—Å –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–µ–Ω—å –∏–ª–∏ –æ—à–∏–±–∫–∞)")
    
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
    logger.info("=" * 50)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    asyncio.run(main())
