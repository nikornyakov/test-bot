import os
import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Bot
from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("simple_bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

async def send_welcome_message(bot, group_id):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        welcome_text = """
*üëã –ü—Ä–∏–≤–µ—Ç, –±—É–¥—É—â–∏–µ –ú–∞–π–∫–ª—ã –î–∂–æ—Ä–¥–∞–Ω—ã –∏ –°—Ç–µ—Ñ–µ–Ω—ã –ö–µ—Ä—Ä–∏! üèÄ*

*üìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï –¢–†–ï–ù–ò–†–û–í–û–ö –ù–ê –°–õ–ï–î–£–Æ–©–£–Æ –ù–ï–î–ï–õ–Æ:*

–í–¢–û–†–ù–ò–ö: üèÄ *19:00-20:30*

–ß–ï–¢–í–ï–†–ì: üèÄ *19:00-20:30*

*üìç –ê–î–†–ï–° –ó–ê–õ–ê:* "Basket Hall" —É–ª. –°–∞–ª–æ–≤–∞, 57 –∫–æ—Ä–ø—É—Å 5
(–¢–æ—Ç —Å–∞–º—ã–π –∑–∞–ª, –≥–¥–µ –∫–æ–ª—å—Ü–æ –∏–Ω–æ–≥–¥–∞ –ø—Ä–æ—â–∞–µ—Ç –≤–∞—à–∏ –ø—Ä–æ–º–∞—Ö–∏ üòÑ)

üéâ –í—ã—Ö–æ–¥–Ω—ã–µ - –≤—Ä–µ–º—è –¥–ª—è:
- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º—ã—à—Ü (–∏ –≥–æ—Ä–¥–æ—Å—Ç–∏)
- –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç—á–µ–π –ù–ë–ê –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è
- –†–∞—Å—Å–∫–∞–∑–æ–≤ –¥—Ä—É–∑—å—è–º –æ —Å–≤–æ–∏—Ö "–ø–æ—á—Ç–∏ –∫–∞–∫ —É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤" –±—Ä–æ—Å–∫–∞—Ö

üí™ –ü–û–ñ–ï–õ–ê–ù–ò–Ø –ù–ê –ù–ï–î–ï–õ–Æ:

- –ü—É—Å—Ç—å –≤–∞—à–∏ –±—Ä–æ—Å–∫–∏ –±—É–¥—É—Ç —Ç–æ—á–Ω—ã–º–∏, –∫–∞–∫ GPS-–Ω–∞–≤–∏–≥–∞—Ç–æ—Ä!
- –ü—É—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –±—É–¥—É—Ç –æ—Å—Ç—Ä—ã–º–∏, –∫–∞–∫ —Å–≤–µ–∂–∏–π –ø–µ—Ä–µ—Ü —á–∏–ª–∏!
- –ü—É—Å—Ç—å –æ–±–≤–æ–¥–∫–∏ –±—É–¥—É—Ç –∫—Ä–∞—Å–∏–≤—ã–º–∏, –∫–∞–∫ –∫–æ—Ç–∏–∫–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!
- –ò –≥–ª–∞–≤–Ω–æ–µ - –ø—É—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–∞ –≤—ã—Å–æ—Ç–µ!
        """
        
        await bot.send_message(
            chat_id=group_id,
            text=welcome_text,
            parse_mode='Markdown'
        )
        
        logger.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

async def send_simple_poll():
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        token = os.getenv("BOT_TOKEN")
        group_id = os.getenv("GROUP_ID")
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: BOT_TOKEN={token[:10]}..., GROUP_ID={group_id}")
        
        if not token or not group_id:
            logger.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã BOT_TOKEN –∏–ª–∏ GROUP_ID")
            return False
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º group_id –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        try:
            group_id = int(group_id)
        except ValueError:
            logger.error(f"GROUP_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: {group_id}")
            return False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        now = datetime.now()
        day_of_week = now.weekday()  # 0-–ø–Ω, 1-–≤—Ç, 2-—Å—Ä, 3-—á—Ç, 4-–ø—Ç, 5-—Å–±, 6-–≤—Å
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        date_str = now.strftime("%d.%m.%Y")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ–ø—Ä–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        if day_of_week == 0:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            training_date = (now + timedelta(days=1)).strftime("%d.%m.%Y")
            question = f"–ë–∞—Å–∫–µ—Ç–±–æ–ª –≤–æ –≤—Ç–æ—Ä–Ω–∏–∫ ({training_date}) üèÄ"
            options = ["‚úÖ –ë—É–¥—É", "‚ùå –ù–µ —Å–º–æ–≥—É", "ü§î –ï—â–µ –Ω–µ –∑–Ω–∞—é"]
            poll_message = f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤–æ –≤—Ç–æ—Ä–Ω–∏–∫ ({training_date}) —Å 19:00 –¥–æ 20:30. –ö—Ç–æ –±—É–¥–µ—Ç?"
            
        elif day_of_week == 2:  # –°—Ä–µ–¥–∞
            training_date = (now + timedelta(days=1)).strftime("%d.%m.%Y")
            question = f"–ë–∞—Å–∫–µ—Ç–±–æ–ª –≤ —á–µ—Ç–≤–µ—Ä–≥ ({training_date}) üèÄ"
            options = ["‚úÖ –ë—É–¥—É", "‚ùå –ù–µ —Å–º–æ–≥—É", "ü§î –ï—â–µ –Ω–µ –∑–Ω–∞—é"]
            poll_message = f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ —á–µ—Ç–≤–µ—Ä–≥ ({training_date}) —Å 19:00 –¥–æ 20:30. –ö—Ç–æ –±—É–¥–µ—Ç?"
            
        else:
            logger.info(f"–°–µ–≥–æ–¥–Ω—è –Ω–µ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ –Ω–µ —Å—Ä–µ–¥–∞, –æ–ø—Ä–æ—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = Bot(token=token)
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–ï–∞–Ω–æ–Ω–∏–º–Ω—ã–π –æ–ø—Ä–æ—Å
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø—É: {question}")
        await bot.send_poll(
            chat_id=group_id,
            question=question,
            options=options,
            is_anonymous=False,
            allows_multiple_answers=False
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        reminder = """
        üí° –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:
        Basket Hall –ø–æ –∞–¥—Ä–µ—Å—É —É–ª. –°–∞–ª–æ–≤–∞, 57 –∫–æ—Ä–ø—É—Å 5.
        """
        
        await bot.send_message(chat_id=group_id, text=poll_message + reminder)
        
        logger.info("–û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        return True
        
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞: {e}")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞: {e}")
        return False

async def send_training_reminder():
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        token = os.getenv("BOT_TOKEN")
        group_id = os.getenv("GROUP_ID")
        
        if not token or not group_id:
            logger.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã BOT_TOKEN –∏–ª–∏ GROUP_ID")
            return False
        
        group_id = int(group_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        now = datetime.now()
        day_of_week = now.weekday()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞–º –∏ —á–µ—Ç–≤–µ—Ä–≥–∞–º
        if day_of_week == 1:  # –í—Ç–æ—Ä–Ω–∏–∫
            training_day = "—Å–µ–≥–æ–¥–Ω—è"
        elif day_of_week == 3:  # –ß–µ—Ç–≤–µ—Ä–≥
            training_day = "—Å–µ–≥–æ–¥–Ω—è"
        else:
            logger.info(f"–°–µ–≥–æ–¥–Ω—è –Ω–µ –≤—Ç–æ—Ä–Ω–∏–∫ –∏ –Ω–µ —á–µ—Ç–≤–µ—Ä–≥, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = Bot(token=token)
        
        reminder = f"""
‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {training_day} –≤ 19:00-20:30! 

–ù–µ –∑–∞–±—É–¥—å—Ç–µ:
‚Ä¢ –°–ø–æ—Ä—Ç–∏–≤–Ω—É—é —Ñ–æ—Ä–º—É
‚Ä¢ –ö—Ä–æ—Å—Å–æ–≤–∫–∏
‚Ä¢ –í–æ–¥—É
‚Ä¢ –•–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!

–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –∫—Ç–æ –±—É–¥–µ—Ç —Å–µ–≥–æ–¥–Ω—è.

üí° 
–ü–æ –ø—Ä–∏–±—ã—Ç–∏—é –Ω–∞ —Ä–µ—Å–µ–ø—à–µ–Ω–µ –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä –∑–∞–ª–∞ –∏ —Ä–∞–∑–¥–µ–≤–∞–ª–∫–∏.
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await bot.send_message(chat_id=group_id, text=reminder)
        
        logger.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        return False

async def send_manual_welcome():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        token = os.getenv("BOT_TOKEN")
        group_id = os.getenv("GROUP_ID")
        
        if not token or not group_id:
            logger.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã BOT_TOKEN –∏–ª–∏ GROUP_ID")
            return False
        
        group_id = int(group_id)
        bot = Bot(token=token)
        
        await send_welcome_message(bot, group_id)
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("=" * 50)
    logger.info("–ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞")
    logger.info("=" * 50)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    now = datetime.now()
    day_of_week = now.weekday()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    import sys
    if len(sys.argv) > 1 and sys.argv[1] == "welcome":
        success = await send_manual_welcome()
        if success:
            logger.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        else:
            logger.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    
    elif day_of_week in [0, 2]:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏–ª–∏ —Å—Ä–µ–¥–∞
        success = await send_simple_poll()
        if success:
            logger.info("–û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            logger.info("–û–ø—Ä–æ—Å –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    
    elif day_of_week in [1, 3]:  # –í—Ç–æ—Ä–Ω–∏–∫ –∏–ª–∏ —á–µ—Ç–≤–µ—Ä–≥
        success = await send_training_reminder()
        if success:
            logger.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        else:
            logger.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    
    else:
        logger.info("–°–µ–≥–æ–¥–Ω—è –Ω–µ –¥–µ–Ω—å –¥–ª—è –æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
    logger.info("=" * 50)

if __name__ == "__main__":
    asyncio.run(main())
